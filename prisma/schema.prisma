generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  sessions     Session[]
  username     String    @unique
  passwordHash String
  role         String    @default("USER")
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  threads      Thread[]
  comments     Comment[]
  userInfo     UserInfo?
  
  givenReputation    ReputationHistory[] @relation("GivenReputation")
  receivedReputation ReputationHistory[] @relation("ReceivedReputation")
}

model UserInfo {
  id              String   @id @default(cuid())
  bio             String?
  reputation      Int      @default(30)
  reputationPower Int      @default(10)
  
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([userId])
}

model ReputationHistory {
  id          String   @id @default(cuid())
  amount      Int
  reason      String
  createdAt   DateTime @default(now())
  
  giverId     String
  giver       User     @relation("GivenReputation", fields: [giverId], references: [id], onDelete: Cascade)
  
  receiverId  String
  receiver    User     @relation("ReceivedReputation", fields: [receiverId], references: [id], onDelete: Cascade)
  
  threadId    String?
  thread      Thread?  @relation(fields: [threadId], references: [id], onDelete: SetNull)
  
  commentId   String?
  comment     Comment? @relation(fields: [commentId], references: [id], onDelete: SetNull)
  
  @@index([giverId])
  @@index([receiverId])
  @@index([threadId])
  @@index([commentId])
}

model Thread {
  id          String              @id @default(cuid())
  title       String
  content     String
  published   Boolean             @default(false)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  
  authorId    String
  author      User               @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]
  categories  Category[]
  reputation  ReputationHistory[]
  
  @@index([authorId])
}

model Comment {
  id          String              @id @default(cuid())
  content     String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  
  authorId    String
  author      User               @relation(fields: [authorId], references: [id], onDelete: Cascade)
  threadId    String
  thread      Thread             @relation(fields: [threadId], references: [id], onDelete: Cascade)
  reputation  ReputationHistory[]
  
  @@index([authorId])
  @@index([threadId])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(false)
  threads     Thread[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  userId    String
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
  
  @@index([userId])
}